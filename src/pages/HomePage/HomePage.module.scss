@import '../../styles/variables';
@import '../../styles/mixins';


.homePage {
  display: flex;
  flex-direction: column;
  align-items: center;
  // Use CSS variable for padding
  padding-top: var(--padding-lg);
  min-height: calc(100vh - 120px);
}

.searchSection {
  width: 100%;
  max-width: 731px;
  // Use CSS variable for margin
  margin-bottom:  var(--spacing-unit-4);
  display: flex;
  // Use CSS variable for gap
  gap: var(--spacing-unit-2);
  // Use CSS variable for background and shadow
  background-color: var(--color-bg-secondary);
  border-radius: var(--border-radius-lg);
  box-shadow: var(--color-card-shadow);
  // Use CSS variable for padding
  padding: var(--padding-md); /* Adjusted to padding-md as it's common for input sections */
  align-items: center;
    transition: background-color var(--transition-speed-normal) var(--transition-ease),
              box-shadow var(--transition-speed-normal) var(--transition-ease);
}

.searchInputWrapper {
  flex-grow: 1;
  display: flex;
  align-items: center;
}

.searchIcon {
  // Use CSS variable for font size
  font-size: calc(var(--font-size-base) * 1.5);
  // Use CSS variable for color
  color: var(--color-secondary);
  // Use CSS variable for margin
  margin-right: var(--spacing-unit-1); /* Adjusted from $spacing-unit * 1.5 to its CSS variable equivalent */
  // Use CSS variable for padding
  padding-left: var(--spacing-unit-1);
}

.searchInput {
  flex-grow: 1; // Ensure input takes available space
  .input {
    width: 100%; // Make the actual input element take full width
    border: none;
    background-color: transparent;
    color: var(--color-text-primary); // Ensure text color adapts
    &::placeholder {
        color: var(--color-placeholder); // Placeholder color adapts
    }
    &:focus {
      box-shadow: none;
      outline: none; // Remove default outline
    }
  }
}

.searchButton {
  flex-shrink: 0;
  padding: var(--padding-md) var(--padding-lg);
}

.statusSection {
  // @include flex-center; // Assuming mixin applies display: flex, justify-content: center, align-items: center
  display: flex;
  justify-content: center;
  align-items: center;
  padding: var(--padding-lg);
  width: 100%;
  max-width: 600px;
}

.errorMessage {

  color: var(--color-danger);
  font-weight: 600;
  text-align: center;
  background-color: var(--color-error-bg); 
  border: 1px solid var(--color-danger);
  border-radius: var(--border-radius);
  padding: var(--padding-md);
  animation: fadeIn var(--transition-speed-fast) forwards;
}

.initialMessage, .noResults {
  // Use CSS variable for colors and font size
  color: var(--color-text-secondary);
  font-size: calc(var(--font-size-base) * 1.1);
  text-align: center;
  padding: var(--padding-lg);
  animation: fadeIn var(--transition-speed-fast) forwards;
}

.userGrid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
  // Use CSS variable for gap
  gap: var(--spacing-unit-3);
  width: 100%;
  max-width: 1000px;
  // Use CSS variable for margin
  margin-top: var(--spacing-unit-4);
  animation: fadeIn var(--transition-speed-normal) forwards;
}


@media (max-width: 768px) {
  .homePage {
    padding: var(--padding-md);
  }

  .searchSection {
    flex-direction: column;
    gap: var(--spacing-unit-1);
    padding: var(--padding-md);
  }

  .userGrid {
    grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
    gap: var(--spacing-unit-2);
  }
}

@media (max-width: 480px) {
  .userGrid {
    grid-template-columns: 1fr;
  }
}

// Keyframe for fade-in animation (can be in global.scss if used often)
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}
